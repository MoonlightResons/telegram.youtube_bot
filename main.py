import tracemalloc
tracemalloc.start()
import os, re, configparser, pafy, random
from googleapiclient.discovery import build
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from keyboard import menu, back, make_keyboards
from models import Video
config = configparser.ConfigParser()
config.read("settings.ini")
TOKEN = config["tgbot"]["token"]

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

def get_title(url):
    yVideo = pafy.new(url)
    title = yVideo.title
    return title

def get_author(url):
    yVideo = pafy.new(url)
    author = yVideo.author
    return author

def get_url(call):
    url = call.split('|') 
    video_url = url[1]
    return video_url

def get_download_url_with_audio(url_video):
    yVideo = pafy.new(url_video)
    video = yVideo.getbest()
    return video.url_https

def get_download_url_best_audio(url_video):
    yVideo = pafy.new(url_video)
    video = yVideo.getbestaudio()
    return video.url_https

class Info(StatesGroup):
    video = State()
    search = State()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=' –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube.', reply_markup = menu())

@dp.message_handler(text="üî•–û –ù–∞—Åüî•")
async def about_info(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤–µ—Ç –¥–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –º–Ω–æ–π(–ù—É—Ä–±–µ–∫–æ–º), –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è Ogogo Academy. –û–Ω –±—É–¥–µ—Ç —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –∏–∑ —é—Ç—É–±–∞ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!!', reply_markup = menu())

@dp.message_handler(text="üé¨–°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µüé¨")
async def save_video(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=' –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ: ', reply_markup=back())
    await Info.video.set()

@dp.message_handler(state=Info.video, content_types=types.ContentTypes.TEXT)
async def edit_name(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await bot.send_message(chat_id=message.chat.id, text='–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu())
        await state.finish()
    elif message.text.lower() == 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é':
        await bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=back())
        await Info.search.set()
    else:
        if message.text.startswith('https://www.youtube.com/watch?v='):
            try:
                video_url = message.text
                await bot.send_message(chat_id=message.chat.id, text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {get_title(video_url)}\n–ê–≤—Ç–æ—Ä: {get_author(video_url)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–∫–∏:', reply_markup = make_keyboards(video_url))
                await state.finish()
            except OSError:
                await bot.send_message(chat_id=message.chat.id, text=f'–°—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è, –ª–∏–±–æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ```https://www.youtube.com/watch?v=...```', reply_markup = back(), parse_mode="Markdown")
            except ValueError:
                await bot.send_message(chat_id=message.chat.id, text=f'–ó–Ω–∞—á–µ–Ω–∏–µ –°—Å—ã–ª–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ, –ª–∏–±–æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ```https://www.youtube.com/watch?v=...```', reply_markup = back(), parse_mode="Markdown")
        else:
            await bot.send_message(chat_id=message.chat.id, text=f'–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ```https://www.youtube.com/watch?v=...```', reply_markup = back(), parse_mode="Markdown")


@dp.message_handler(text="üîç –ü–æ–∏—Å–∫")
async def search_videos(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=back())
    await Info.search.set()

@dp.message_handler(state=Info.search, content_types=types.ContentTypes.TEXT)
async def search_videos_by_title(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await bot.send_message(
            chat_id=message.chat.id,
            text="–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=menu())
        await state.finish()
    else:
        query = message.text
        search_results = await perform_search(query)
        
    if search_results:
        await bot.send_message(
        chat_id=message.chat.id,
        text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"
    )
    for video in search_results:
        video_url = video.url
        video_info = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {get_title(video_url)}\n–ê–≤—Ç–æ—Ä: {get_author(video_url)}\n–°—Å—ã–ª–∫–∞: {video_url}"
        await bot.send_message(
            chat_id=message.chat.id,
            text=video_info,
            reply_markup=make_keyboards(video_url)
        )
    else:
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.finish()

async def perform_search(query):
    search_results = []
    api_key = "AIzaSyCJMlBLGPTaLKoYTat_k0mQ_x38Z-E3g2A"

    youtube = build('youtube', 'v3', developerKey=api_key)

    search_response = youtube.search().list(
        q=query,
        part='snippet',
        type='video',
        maxResults=5
    ).execute()

    for item in search_response['items']:
        video_id = item['id']['videoId']
        video_title = item['snippet']['title']
        video_url = f'https://www.youtube.com/watch?v={video_id}'

        video = Video(title=video_title,author=video_url, url=video_url)
        search_results.append(video)

    return search_results

@dp.callback_query_handler()
async def handler_call(call: types.CallbackQuery, state: FSMContext):
    chat_id = call.from_user.id
    if call.data.startswith('best_with_audio'):
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        video_url = get_url(call.data)
        download_link = get_download_url_with_audio(video_url)
        await bot.send_message(chat_id=chat_id, text=f' –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {download_link}', reply_markup = menu())
    elif call.data.startswith('best_audio'):
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        video_url = get_url(call.data)
        download_link = get_download_url_best_audio(video_url)
        await bot.send_message(chat_id=chat_id, text=f' –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: {download_link}', reply_markup = menu())
    elif call.data == 'cancel':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(chat_id=chat_id, text='–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
